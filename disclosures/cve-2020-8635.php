<html>

<?php include '../header.php';?>

<body>

<?php include '../navbar.php';?>

<div class="body-content">
    <h2>
        Local Privilege Escalation in Wing FTP Server (v6.2.3)
    </h2>
    <div class="center">
        <img class="headerpic" src="https://www.wftpserver.com/images/wingftp_logo.gif" alt="Hack the Planet" height="100px" width="100px" align="center">
    </div>
    <p class="date">2020-03-04</p>
    <h3>Description</h3>
    <p class="text">
        From the official website: Wing FTP Server is an easy-to-use, secure, and reliable FTP server software for Windows, Linux, Mac OS, and Solaris. It supports multiple file transfer protocols, including FTP, FTPS, HTTP, HTTPS, and SFTP, giving your clients flexibility in how they connect to the server. And it provides admins with a web-based interface to administrate the server from anywhere. You can also monitor server performance and online sessions and even receive email notifications about various events taking place on the server. </p>
    <p class="text">
        Download Link: <a href="https://www.wftpserver.com/download.htm">Wing FTP Server Software Downloads</a>
    </p>

        <h4>Vulnerability - CVE-2020-8634 and CVE-2020-8635</h4>
        <p class="text">
            A number of weaknesses in Wing FTP Server allow any local user to escalate privileges to root on Linux, MacOS, and Solaris.  Three weaknesses were discovered in the software which make exploitation possible.
        </p>
    <h4>Issues:</h4>
    <ol>
        <li>Wing FTP Server follows symbolic links by default.</li>
        <li>Wing FTP Server sets an unsafe umask (permissions) for all files modified within the web interface.</li>
        <li>By default, the server sets unsafe permissions on system files, compromising the integrity of system settings and confidentiality of user password hashes.</li>
    </ol>
    <h3>Background</h3>
    <p class="text">
        To install the server, download the archive from the Wing FTP website and extract.  Within the directory, run the wftpserver binary.  During installation, the software prompts the user to create an administrative user, an administrative password, choose which port the administrative HTTP interface should use (default 5466), then asks whether Wing FTP Server should start.  The installation directory hereon will be referred to as <b>$WINGFTP_DIR</b>.  
    <p class="text">
        Ports will not open until the server is further configured.  Once a domain is created within the administrative interface (http://localhost:5466), Wing FTP server opens services on TCP ports 21 (FTP), 990 (FTPS), 80 (HTTP), 443 (HTTPS), 22 (SSH).  If a service is already running on one of those ports, Wing FTP does not override that service. The server will also open these services once a "domain" folder is created within <b>$WINGFTP_DIR</b> with a valid portlistener.xml file inside.  This may only be done if the user has full write privileges to <b>$WINGFTP_DIR</b>.
     </p>
    <p class="text">
        For the following attack scenarios, consider a Wing FTP Server installation on a Linux (Ubuntu 18.04) host.  A low-privilege Linux user (lowleveluser) with terminal access also has a Wing FTP account and access to their home directory (/home/lowleveluser).   After examining a few attack scenarios, it will become clear that the only prerequisite for escalation of privilege is command execution on the server as <i>any user</i>. 
    </p>
    <h3>Attack Scenario: Issue 1</h3>    
    <h4>Unsafe interpretation of symbolic links</h4>
    <p class="text">
    Wing FTP server does not appear to check permissions while conducting file operations.  The program runs as a superuser and therefore may access any directory or file as a superuser.  In addition, the software follows symbolic links by default for all users.  If a user creates a symbolic link to the filesystem root (ln -s / filesystem), a low-privilege user with read-only permissions to specific directories in Wing FTP may gain privileges to read the entire filesystem, including sensitive system files only accessible by root.  Any Wing FTP user utilizing the HTTP interface may access any file in their path with permissions of the root user.  If the user has read, write, and delete privileges within the application, they will also gain privileges to write or delete any file on the filesystem.  
    </p>
    <h4>Exploitation</h4>
    <p class="text">
        Any user may create a symbolic link within a folder for which they have write privileges.  
        <img class="body-img" src="../img/wftpflow1a.PNG" />
        This grants them read or read/write access to the entire filesystem.  
        <img class="body-img" src="../img/wftpflow1b.PNG" />
        A user may read sensitive files such as the /etc/shadow file, crack passwords offline, and then gain privileges of the root user.  If the user has read, write, and delete privileges, they may also write to system files to increase privileges directly (by editing /etc/shadow directly or by other means).  
        <img class="body-img" src="../img/wftpflow1c.PNG" />
    </p>
    <h3>Attack Scenario: Issue 2</h3>
    <h3>CVE-2020-8634</h3>
    <h4>Unsafe permissions set when modifying files</h4>
    <p class="text">
        By default, Wing FTP Server appears to utilize the umask=111 when modifying files.  The umask is able to be set in the administrator interface (http://localhost:5466).  
        However, within this interface, the default permissions are "644" for modified or created files.  Though this is indeed the case via FTP, files modified via the HTTP(S) interface are saved as world-readable and world-writable files ("666").  
        This appears to be a bug in Wing FTP Server.  Thus, if a higher-privilege Wing FTP user modifies a file on the filesystem, the owner and group will be changed to root and the permissions will be changed to "666".
        In addition, the permissions of the file will be changed to 666 (world readable and world writable).  This means that any modifications of sensitive files result in full read/write privileges being granted to all users on the system.  
        If this situation occurs, any non-superusers gain access to those files.  The modification of a particularly sensitive file (/etc/passwd, /etc/shadow, /etc/sudoers, etc.) may allow these users to escalate to a root.
    </p>
    <h4>Exploitation</h4>
    <p class="text">
        The screenshot below shows a user accessing a sensitive file via the Wing FTP Server HTTP(S) interface, then clicking the “Save” button to perform a file modify operation.  
        <img class="body-img" src="/img/wftpflow2a.PNG" />
       With command line access, we see that the permissions of /etc/shadow were changed to 666 (world-writable). 
        <img class="body-img" src="/img/wftpflow2b.PNG" />
    </p>
    <h3>Attack Scenario: Issue 3</h3>
    <h3>CVE-2020-8635</h3>
    <h4>Unsafe default permissions on sensitive Wing FTP configuration files</h4>
    <p class="text">
       Once a domain is created and user accounts are added via the administrative interface (http://localhost:5466), they are saved to <b>$WINGFTP_DIR</b>/Data/&lt;domain&gt;/users/&lt;username&gt;.xml, where &lt;domain&gt; and &lt;username&gt; are the names of the domain and users, respectively.
       The files "&lt;username&gt;.xml" are created with world-readable permissions, allowing any user on the system to view existing users and the md5 hash of their passwords.  
       In addition, these files are also <i>world-writable</i>, allowing any user to forge their own Wing FTP user information to increase privileges within the application or change other user’s password hashes (account takeover).  
       To make matters worse, the folder <b>$WINGFTP_DIR</b>/Data/&lt;domain&gt;/users, by default, is created with full global permissions (777).  
       This allows any user on the system to write to it.  Combined, these insecure permissions allow any user to forge entire Wing FTP user accounts.
    </p>
    <h4>Exploitation</h4>
    <p class="text">
        First, an administrative user should log into the administrative interface (http://localhost:5466) to view the existing user accounts.  This is to view existing users within the system for a given domain.  
        In this example, two user accounts exist: "adminuser" and "lowleveluser".  
        <img class="body-img" src="/img/wftpflow3a.PNG" />
        Using a crafted XML file similar to those in &lt;username&gt;.xml files created by Wing FTP Server, an attacker may forge a user by copying the XML file into the users directory located at <b>$WINGFTP_DIR</b>/Data/&lt;domain&gt;/users/ (see screenshot below).  
        In the screenshot below, we forge a user account "h00p" with a password of "h00p" with full permissions in the filesystem root ("/").
        <img class="body-img" src="/img/wftpflow3b.PNG" />
        Again within the administrative interface, if an administrative user refreshes the page, they observe a new user "h00p" created within the application.
        <img class="body-img" src="/img/wftpflow3c.PNG" />
        Last, a curl to the login URL demonstrates that the user "h00p" may successfully log in to the application.  Observe in the HTTPS response that the "Set-Cookie" HTTP header is returned with a valid "UID" cookie granting access.  
        <img class="body-img" src="/img/wftpflow3d.PNG" />
        In this way, a user with terminal access or command execution on the server may forge a user account. 
    </p>
    
    <h4>Putting it Together:</h4>
    <p class="text">
        At this point, the path to privilege escalation should be pretty clear.  But just for clarity, I've included the steps below.
    </p>
        <ol>
            <li>Have terminal access or code execution on the server as any user.</li>
            <li>Forge a user account with (at a minimum) read, write, and delete privileges.</li>
            <li>Within the HTTP(S) interface, modify a sensitive system file.  This will make the file world-writable.</li>
            <li>Either from the web interface or terminal, modify the sensitive system file to increase privileges on the system (i.e. removing the root password reference within /etc/passwd or changing the root password hash in /etc/shadow.</li>
            <li>Profit.</li>
        </ol>
    <h4>Exploit</h4>
    <p class="text">
        To facilitate exploitation, I've created an exploit for this bug, provided a user has SSH access already to the system.  
        The exploit, written with Python's paramiko, will log in, forge a Wing FTP user account, log in via the HTTP(S) interface, and modify the root password hash within the /etc/shadow file.  Then, SSH in and su to root. Obviously each of these steps can be done manually as well.  Enjoy!
    </p>
    <a href="/disclosures/cve-2020-8635.py.txt">Link to Exploit</a>
    <img class="body-img" src="/img/wftpsploit.PNG" />
    <br />
        <h4>Operating Systems Verified:</h4>
        <ul>
            <li>Kali Linux 4</li>
            <li>Ubuntu 18.04.1 LTS</li>
            <li>MacOS Catalina</li>
            <li>Oracle Solaris 11.4 x86</li>
        </ul>
   
    </div>
     <?php include './policy.php';?>
</body>

<?php include '../footer.php';?>

</html>
